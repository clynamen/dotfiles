"============= Vundle stuff ===============
set nocompatible
filetype off                   " required!
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

 " let Vundle manage Vundle
Bundle 'gmarik/vundle'
 " my bundles
Bundle 'Valloric/YouCompleteMe'
Bundle 'wesleyche/SrcExpl'
Bundle 'Command-T'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'Chiel92/vim-autoformat'
Bundle 'techlivezheng/vim-plugin-minibufexpl'
Bundle 'c9s/perlomni.vim'
Bundle 'scrooloose/nerdcommenter'
Bundle 'tpope/vim-surround'
Bundle 'lekv/vim-clewn'
Bundle 'SirVer/ultisnips'
Bundle 'othree/xml.vim'
Bundle 'derekwyatt/vim-scala'

filetype plugin indent on " required!
filetype plugin on

"set number "Line numbers are good
"set backspace=indent,eol,start "Allow backspace in insert mode
set history=1000 "Store lots of :cmdline history
set showcmd "Show incomplete cmds down the bottom
set showmode "Show current mode down the bottom
"set gcr=a:blinkon0 "Disable cursor blink
"set visualbell "No sounds
"set autoread "Reload files changed outside vim
set mouse=a


set undodir=~/.vim-undo
set backupdir=~/.vim-backup


" use system clipboard
set clipboard+=unnamed

"turn on syntax highlighting
syntax on

"disable bell
set noeb vb t_vb=

" ================ Layout =========================
set hidden

" ================ Search Settings =================

set incsearch "Find the next match as we type the search
set hlsearch "Hilight searches by default

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.

silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undodir=~/.vim/backups
set undofile

" ================ Indentation ======================

set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

" =============== paste ===============
set pastetoggle=<F2>

" =============== CSupport ===========
let g:C_Styles = { '.c,.h,.cc,.cpp,*.hh' : 'CPP' }

" =============== Snippet ===========
let g:UltiSnipsSnippetDirectories=["UltiSnips", "/home/clynamen/.vim/clynamen-snippets"]

" =============== SrcExpl =============
nmap <F8> :SrcExplToggle<CR>
let g:SrcExpl_winHeight = 8
let g:SrcExpl_refreshTime = 100
let g:SrcExpl_jumpKey = "<ENTER>"
let g:SrcExpl_gobackKey = "<SPACE>"
let g:SrcExpl_pluginList = [
        \ "__Tag_List__",
        \ "_NERD_tree_",
        \ "-MiniBufExplorer-",
        \ "Source_Explorer"
    \ ]
let g:SrcExpl_searchLocalDef = 1
let g:SrcExpl_isUpdateTags = 0
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."
let g:SrcExpl_updateTagsKey = "<F12>"
let g:SrcExpl_prevDefKey = "<F3>"
let g:SrcExpl_nextDefKey = "<F4>"


filetype plugin on
filetype indent on

set t_Co=256
colorscheme candycode
if &diff
  colorscheme inkpot
endif

" ====== NERDTree =============
map <F2> :NERDTreeToggle<cr>

" buffer navigation 
map <Leader>t :CommandTBuffer <CR>
map <C-l> :bnext<cr>
map <C-h> :bprevious<cr>

" ========== Autoformat ============
noremap <F3> :Autoformat<CR><CR>
let g:formatprg_args_expr_c = '"--mode=c --style=java -pcH".(&expandtab ? "s".&shiftwidth : "t")'
 

let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
nnoremap <leader>[ :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>] :YcmCompleter GoToDefinition<CR>
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR> 

"========= Syntastic ======
let g:syntastic_id_checkers = 1
let g:syntastic_error_symbol = '>>'
let g:syntastic_warning_symbol = 'W'
let g:syntastic_always_populate_loc_list = 1

"======== Quickfix =======
nnoremap <F6> :call ToggleLop()<CR> 
let g:ToggleLopShown = 1 
function! ToggleLop() 
  if( g:ToggleLopShown == 0 ) 
      :lop
      let g:ToggleLopShown = 1 
  else 
      :lcl
      let g:ToggleLopShown = 0 
  endif 
endfunction 

"======= Eclim ========
"
" completion with YCM
let g:EclimCompletionMethod = 'omnifunc'

"=========ultisnips - ycm conflicts ======
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

"inoremap <C-t> <ESC>:call UltiSnips#ExpandSnippet() <CR>i
au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
"

"========= vimperator tmp file syntax=====
au BufNewFile,BufRead *.tmp setf none
au BufNewFile,BufRead *.test set filetype=xml
au BufNewFile,BufRead *.launch set filetype=xml
au BufNewFile,BufRead *.world set filetype=xml
