"============= Vundle stuff ===============
set nocompatible
filetype off                   " required!

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

 " let Vundle manage Vundle
Plugin 'gmarik/vundle'
 " my bundles
Plugin 'Valloric/YouCompleteMe'
Plugin 'wesleyche/SrcExpl'
Plugin 'Command-T'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'Chiel92/vim-autoformat'
Plugin 'techlivezheng/vim-plugin-minibufexpl'
Plugin 'c9s/perlomni.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'lekv/vim-clewn'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'flazz/vim-colorschemes'
Plugin 'derekwyatt/vim-scala'
Plugin 'moll/vim-node'
Plugin 'walm/jshint.vim'
Plugin 'myhere/vim-nodejs-complete'
Plugin 'sidorares/node-vim-debugger'
Plugin 'JuliaLang/julia-vim'
Plugin 'tmhedberg/matchit'
Plugin 'Shougo/vimproc.vim'
Plugin 'eagletmt/ghcmod-vim'
Plugin 'eagletmt/neco-ghc'
Plugin 'dag/vim2hs'
Plugin 'godlygeek/tabular'
"Plugin 'phildawes/racer'
Plugin 'wting/rust.vim' 
Plugin 'elixir-lang/vim-elixir'
Plugin 'lukerandall/haskellmode-vim'
Plugin 'Shougo/unite.vim'
Plugin 'Twinside/vim-hoogle'
Plugin 'fatih/vim-go'
Plugin 'xolox/vim-lua-ftplugin'
Plugin 'xolox/vim-misc'
Plugin 'zah/nimrod.vim'
"html/css
Plugin 'mattn/emmet-vim'
Plugin 'jaxbot/browserlink.vim'
Plugin 'kopischke/unite-spell-suggest'
"pandoc
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'
"editing
Plugin 'tpope/vim-surround'
"gui
Plugin 'bling/vim-airline'
Plugin 'easymotion/vim-easymotion'
Plugin 'rhysd/vim-clang-format'

" All of your Plugins must be added before the following line
call vundle#end()            " required

"========================================== 

filetype plugin indent on    " required

"set number "Line numbers are good
"set backspace=indent,eol,start "Allow backspace in insert mode
set history=1000 "Store lots of :cmdline history
set showcmd "Show incomplete cmds down the bottom
set showmode "Show current mode down the bottom
set title
"set gcr=a:blinkon0 "Disable cursor blink
"set visualbell "No sounds
"set autoread "Reload files changed outside vim
set mouse=a


set undodir=~/.vim-undo//
set backupdir=~/.vim-backup//
set directory=~/.vim-swap//

" use system clipboard
set clipboard+=unnamed

"turn on syntax highlighting
syntax on

"disable bell
set noeb vb t_vb=

" ================ Layout =========================
set hidden

" ================ Search Settings =================

set incsearch "Find the next match as we type the search
set hlsearch "Hilight searches by default

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.

silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undofile

" ================ Indentation ======================

set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

" =============== paste ===============
set pastetoggle=<F2>

" =============== CSupport ===========
let g:C_Styles = { '.c,.h,.cc,.cpp,*.hh' : 'CPP' }

" =============== SrcExpl =============
nmap <F8> :SrcExplToggle<CR>
let g:SrcExpl_winHeight = 8
let g:SrcExpl_refreshTime = 100
let g:SrcExpl_jumpKey = "<ENTER>"
let g:SrcExpl_gobackKey = "<SPACE>"
let g:SrcExpl_pluginList = [
        \ "__Tag_List__",
        \ "_NERD_tree_",
        \ "-MiniBufExplorer-",
        \ "Source_Explorer"
    \ ]
let g:SrcExpl_searchLocalDef = 1
let g:SrcExpl_isUpdateTags = 0
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."
let g:SrcExpl_updateTagsKey = "<F12>"
let g:SrcExpl_prevDefKey = "<F3>"
let g:SrcExpl_nextDefKey = "<F4>"


filetype plugin on
filetype indent on

set t_Co=256
colorscheme candycode
if &diff
  colorscheme inkpot
endif

" ====== NERDTree =============
map <F2> :NERDTreeToggle<cr>

" buffer navigation 
map <Leader>t :CommandTBuffer <CR>
map <C-l> :bnext<cr>
map <C-h> :bprevious<cr>

" ========== Autoformat ============
noremap <F3> :Autoformat<CR><CR>
let g:formatprg_args_expr_c = '"--mode=c --style=java -pcH".(&expandtab ? "s".&shiftwidth : "t")'
 

let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
nnoremap <leader>[ :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>] :YcmCompleter GoToDefinition<CR>
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR> 

"========= Syntastic ======
let g:syntastic_id_checkers = 1
let g:syntastic_error_symbol = '>>'
let g:syntastic_warning_symbol = 'W'
let g:syntastic_always_populate_loc_list = 1

"======== Quickfix =======
nnoremap <F6> :call ToggleLop()<CR> 
let g:ToggleLopShown = 1 
function! ToggleLop() 
  if( g:ToggleLopShown == 0 ) 
      :lop
      let g:ToggleLopShown = 1 
  else 
      :lcl
      let g:ToggleLopShown = 0 
  endif 
endfunction 


"========= haskell =====================
let g:haddock_browser = "/usr/bin/firefox"
let g:haddock_browser_callformat = "firefox %s %s"
let g:ghc = "/usr/bin/ghc"
let g:haddock_docdir="/usr/share/doc/ghc/html"
let g:haddock_indexfiledir="/home/clynamen/.vim/"
let $PATH = $PATH . ':' . expand('~/.cabal/bin')

"========= specific file options =====
au BufNewFile,BufRead *.tmp setf none
au BufNewFile,BufRead *.test set filetype=xml
au BufNewFile,BufRead *.launch set filetype=xml
au BufNewFile,BufRead *.world set filetype=xml

"========= Haskell ===================
setlocal omnifunc=necoghc#omnifunc
let g:ycm_semantic_triggers = {'haskell' : ['.']}
let g:necoghc_enable_detailed_browse = 1

let g:haskell_conceal = 0

"=========== Lua =====================
let g:lua_compiler_name = '/usr/bin/luajit'
let g:lua_check_syntax = 1
let g:lua_check_globals = 1
let g:lua_check_syntax = 0 " done via syntastic
let g:lua_define_omnifunc = 0 " must be enabled also (g:lua_complete_omni=1, but crashes Vim!)
let g:lua_complete_library = 0 " interferes with YouCompleteMe
let g:lua_complete_dynamic = 0 " interferes with YouCompleteMe

" :let g:lua_complete_omni = 1 "do not use this, use when necessary


"========= ultisnips ====================
"
"let g:UltiSnipsSnippetDirectories=["UltiSnips", "/home/clynamen/.vim/clynamen-snippets/"]

"let g:UltiSnipsSnippetsDir        = $HOME.'/.vim/UltiSnips/'
"let g:UltiSnipsSnippetDirectories=["UltiSnips"]
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsListSnippets="<c-h>"
let g:ycm_complete_in_comments = 1 
let g:ycm_seed_identifiers_with_syntax = 1 
let g:ycm_collect_identifiers_from_comments_and_strings = 1 
"
"
""============ latex ===============
"" LaTeX (rubber) macro for compiling
"nnoremap <leader>c :w<CR>:!rubber --pdf --warn all %<CR>
"" View PDF macro; '%:r' is current file's root (base) name.
"nnoremap <leader>v :!okular %:r.pdf > /dev/null 2>&1 &<CR><CR>

set nofoldenable    " disable folding

""========== pandoc ===========
function! PotionCompileAndRunFile()
  silent !clear
  let fname = expand("%:r")
  :exec '!pandoc ' . expand("%") . ' -o ' . fname . '.pdf '  
endfunction

function s:MDSettings()
  noremap <buffer> <Leader>c :call PotionCompileAndRunFile()<CR>
endfunction

autocmd BufRead,BufNewFile *.md setfiletype markdown
autocmd FileType markdown :call <SID>MDSettings()
"" ==============================


let g:clang_format#auto_formatexpr=1
let g:clang_format#style_options = {
            \ "BasedOnStyle" : "LLVM",
            \ "UseTab" : "Never",
            \ "IndentWidth" : 4,
            \ "BreakBeforeBraces" : "Attach",
            \ "AllowShortIfStatementsOnASingleLine" : "false",
            \ "IndentCaseLabels" : "true",
            \ "ColumnLimit" : 0,
            \ "PointerAlignment" : "Left",
            \ "AccessModifierOffset" : -4,
            \ "AllowShortLoopsOnASingleLine" : "false",
            \ "AllowShortFunctionsOnASingleLine" : "false",
            \ "MaxEmptyLinesToKeep" : 2,
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "Auto",
            \ "BreakConstructorInitializersBeforeComma" : "true",
            \ "AllowAllParametersOfDeclarationOnNextLine" : "false",
            \ "BinPackParameters" : "false",
            \}

autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
"


""========= Unite ============

map z= :Unite spell_suggest<CR>

"" ==============================
